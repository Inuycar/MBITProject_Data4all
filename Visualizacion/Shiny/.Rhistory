library(shiny); runApp('Candidatos.R')
library(shiny); runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
runApp('C:/Users/Silvia/Desktop/Proyecto/Detect_Pers/Shiny/Candidatos.R')
library(shiny)
library(networkD3)
links <- read.table(header = T, text = '
source target value
0 1 1
0 2 1
')
nodes <- read.table(header = T, text = '
name group
dad 1
son1 1
son2 1
')
son1 <- read.table(text = '
name John
age 18
')
son2 <- read.table(text = '
name Mark
age 14
')
ui <- shinyUI(fluidPage(
fluidRow(
column(4, forceNetworkOutput("force")),
column(4, DT::dataTableOutput("table"))
)
))
server <- shinyServer(function(input, output) {
output$force <- renderForceNetwork({
forceNetwork(Links = links, Nodes = nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 1, opacityNoHover = 1,
clickAction = 'Shiny.onInputChange("id", d.name)')
})
output$table <- DT::renderDataTable(DT::datatable(get(input$id)))
})
shinyApp(ui = ui, server = server)
library(shiny)
fluidPage(
title = 'Select Table Rows',
h1('A Client-side Table'),
fluidRow(
column(6, DT::dataTableOutput('x1')),
column(6, plotOutput('x2', height = 500))
),
hr(),
h1('A Server-side Table'),
fluidRow(
column(9, DT::dataTableOutput('x3')),
column(3, verbatimTextOutput('x4'))
)
)
library(DT)
shinyServer(function(input, output, session) {
output$x1 = DT::renderDataTable(cars, server = FALSE)
# highlight selected rows in the scatterplot
output$x2 = renderPlot({
s = input$x1_rows_selected
par(mar = c(4, 4, 1, .1))
plot(cars)
if (length(s)) points(cars[s, , drop = FALSE], pch = 19, cex = 2)
})
# server-side processing
mtcars2 = mtcars[, 1:8]
output$x3 = DT::renderDataTable(mtcars2, server = TRUE)
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
})
shinyApp(ui = ui, server = server)
library(shiny)
library(networkD3)
links <- read.table(header = T, text = "
source  target  value
0       1       1
1       2       1
2       0       1
0       3       1
3       4       1
4       5       1
5       3       1
")
nodes <- read.table(header = T, text = "
name    group1  group2
zero    A       D
one     B       E
two     C       F
three   A       E
four    B       F
five    C       D
")
nodes$group <- paste(nodes$group1, nodes$group2, sep = "_")
forceNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target", Value = "value",
NodeID = "name", Group = "group",
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"))
library(shiny)
library(DT)
library(ggplot2)
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
dataTableOutput("table1"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$table1 <- DT::renderDataTable(mtcars)
#figure out a way to reactively select points to point into output$plot1
output$plot1 <- renderPlot({
s = input$table1_rows_selected
mtcars <- mtcars[ s,]
ggplot(mtcars, aes(mtcars$wt, mtcars$mpg)) + geom_point()
})
output$info <- renderPrint({
# With base graphics, need to tell it what the x and y variables are.
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg")
# nearPoints() also works with hover and dblclick events
})
}
shinyApp(ui, server)
runApp('Candidatos.R')
